openapi: 3.0.0
info:
  title: Application API
  description: API for managing applications.
  version: 1.0.0

paths:
  /app/add-new:
    post:
      summary: Create a new application
      description: Creates a new application with provided details. Only users with the admin role can create an application.
      tags:
        - Application (use by Admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - status
                - priority
              properties:
                title:
                  type: string
                  description: Title of the application (must be unique)
                  example: "New Application"
                description:
                  type: string
                  description: Detailed description of the application
                  example: "Detailed application description"
                assets:
                  type: array
                  items:
                    type: string
                  description: List of asset URLs related to the application
                  example:
                    - "http://example.com/asset1"
                    - "http://example.com/asset2"
                status:
                  type: string
                  description: Current status of the application
                  enum:
                    - To Do
                    - Implement
                    - Testing
                    - Production
                  example: "To Do"
                priority:
                  type: string
                  description: Priority level of the application
                  enum:
                    - High
                    - Medium
                    - Low
                  example: "High"
                teamMembers:
                  type: array
                  description: List of user IDs to be added as team members
                  items:
                    type: string
                  example:
                    - "63b6f0a0c6a5f08d4b5e613c"
                    - "63b6f0a0c6a5f08d4b5e613d"
            example:
              title: "New Application"
              description: "A detailed description of the application"
              assets:
                - "http://example.com/asset1"
                - "http://example.com/asset2"
              status: "To Do"
              priority: "High"
              teamMembers:
                - "63b6f0a0c6a5f08d4b5e613c"
                - "63b6f0a0c6a5f08d4b5e613d"
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application created successfully"
                  application:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "63b6f0a0c6a5f08d4b5e613c"
                      title:
                        type: string
                        example: "New Application"
                      description:
                        type: string
                        example: "Detailed application description"
                      assets:
                        type: array
                        items:
                          type: string
                        example:
                          - "http://example.com/asset1"
                          - "http://example.com/asset2"
                      status:
                        type: string
                        example: "To Do"
                      priority:
                        type: string
                        example: "High"
                      teamMembers:
                        type: array
                        items:
                          type: string
                        example:
                          - "63b6f0a0c6a5f08d4b5e613c"
                          - "63b6f0a0c6a5f08d4b5e613d"
        '400':
          description: Missing required fields or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Some team members are invalid."
        '403':
          description: Only admins can create applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden: Admin access required."
        '409':
          description: Duplicate application title
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An application with the title 'New Application' already exists."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Detailed server error message"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/edit/{id}:
    put:
      summary: Edit an existing application
      description: Allows an admin to edit the details of an application.
      tags:
        - Application (use by Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Application ID to edit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                assets:
                  type: array
                  items:
                    type: string
                status:
                  type: string
                  enum:
                    - To Do
                    - Implement
                    - Testing
                    - Production
                priority:
                  type: integer
                tasks:
                  type: array
                  items:
                    type: string
                  description: List of task IDs associated with the application
                teamMembers:
                  type: array
                  items:
                    type: string
                  description: List of user IDs assigned to the application
            example:
              title: "Updated Application"
              description: "Updated description"
              assets: ["http://example.com/asset1"]
              status: "Testing"
              priority: 2
              tasks: ["task1", "task2"]
              teamMembers: ["user1", "user2"]
      responses:
        '200':
          description: Application updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application updated successfully"
                  application:
                    $ref: '#/components/schemas/Application'
        '404':
          description: Application not found
        '403':
          description: Only admins can edit applications
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API


  /app/trash/{title}:
    put:
      summary: Move an application to trash
      description: Marks an application as trashed. Only admins can perform this action.
      tags:
        - Application (use by Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: title
          required: true
          schema:
            type: string
          description: Application title to trash
      responses:
        '200':
          description: Application moved to trash
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application moved to trash"
        '404':
          description: Application not found
        '403':
          description: Only admins can trash applications
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/delete/{id}:
    delete:
      summary: Permanently delete an application
      description: Permanently deletes an application. Only trashed applications can be permanently deleted. Only admins can perform this action.
      tags:
        - Application (use by Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Application ID to delete
      responses:
        '200':
          description: Application permanently deleted
        '404':
          description: Application not found or not in trash
        '403':
          description: Only admins can delete applications permanently
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/get-all:
    get:
      summary: Get all applications
      tags:
        - Application
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a list of all applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/search-app/{application_title}:
    get:
      summary: Search an application by title
      tags:
        - Application
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: application_title
          required: true
          schema:
            type: string
          description: The application title
      responses:
        '200':
          description: Application search results
        '404':
          description: Application not found
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/search-todo-app/{application_title}:
    get:
      summary: Search a To Do application by title
      tags:
        - Application
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: application_title
          required: true
          schema:
            type: string
          description: The title of the To Do application
      responses:
        '200':
          description: To Do application search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
              example:
                - title: "Sample To Do Application"
                  description: "A sample application in To Do status"
                  status: "To Do"
                  priority: 1
        '404':
          description: Application not found
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/search-implement-app/{application_title}:
    get:
      summary: Search an Implementing application by title
      tags:
        - Application
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: application_title
          required: true
          schema:
            type: string
          description: The title of the Implementing application
      responses:
        '200':
          description: Implementing application search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
              example:
                - title: "Sample Implementing Application"
                  description: "A sample application in Implement status"
                  status: "Implement"
                  priority: 2
        '404':
          description: Application not found
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/search-testing-app/{application_title}:
    get:
      summary: Search a Testing application by title
      tags:
        - Application
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: application_title
          required: true
          schema:
            type: string
          description: The title of the Testing application
      responses:
        '200':
          description: Testing application search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
              example:
                - title: "Sample Testing Application"
                  description: "A sample application in Testing status"
                  status: "Testing"
                  priority: 3
        '404':
          description: Application not found
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/search-production-app/{application_title}:
    get:
      summary: Search a Production application by title
      tags:
        - Application
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: application_title
          required: true
          schema:
            type: string
          description: The title of the Production application
      responses:
        '200':
          description: Production application search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
              example:
                - title: "Sample Production Application"
                  description: "A sample application in Production status"
                  status: "Production"
                  priority: 4
        '404':
          description: Application not found
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/restore/{title}:
    put:
      summary: Restore an application from trash
      description: Restores a trashed application back to active status. Only admins can perform this action.
      tags:
        - Application (use by Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: title
          required: true
          schema:
            type: string
          description: Title of the application to restore
      responses:
        '200':
          description: Application is restored
        '404':
          description: Application not found
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/get-trashed-app:
    get:
      summary: Get all trashed applications
      description: Retrieves a list of all applications currently in the trash. Only admins can access this list.
      tags:
        - Application (use by Admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of trashed applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  trashedApplications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'
              example:
                trashedApplications:
                  - title: "Trashed Application 1"
                    description: "An application moved to trash"
                    status: "To Do"
                    priority: 2
                    teamMembers: ["user1", "user2"]
                  - title: "Trashed Application 2"
                    description: "Another trashed application"
                    status: "Testing"
                    priority: 1
                    teamMembers: ["user3", "user4"]
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/get-status-statistic:
    get:
      summary: Get application count by status
      description: Retrieves the count of applications grouped by their status.
      tags:
        - Application
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Application counts by status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  Statistic:
                    type: array
                    items:
                      type: object
                      properties:
                        total:
                          type: integer
                        detail:
                          type: array
                          items:
                            type: object
                            properties:
                              status:
                                type: string
                              count:
                                type: integer
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/get-priority-statistic:
    get:
      summary: Get application count by priority
      description: Retrieves the count of applications grouped by priority level.
      tags:
        - Application
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Application counts by priority
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  Statistic:
                    type: array
                    items:
                      type: object
                      properties:
                        priority:
                          type: string
                        count:
                          type: integer
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/get-apps-user:
    get:
      summary: Get application counts per user
      description: Retrieves the total number of applications per user, grouped by their status, for all non-trashed applications.
      tags:
        - Application
      responses:
        '200':
          description: Successfully retrieved application counts per user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the response
                    example: "Applications count for each member"
                  Statistic:
                    type: array
                    description: Aggregated application statistics per user
                    items:
                      type: object
                      properties:
                        total_user:
                          type: integer
                          description: Total number of users
                          example: 5
                        detail:
                          type: array
                          description: Details of application counts per user
                          items:
                            type: object
                            properties:
                              user_name:
                                type: string
                                description: Name of the user
                                example: "John Doe"
                              total_app:
                                type: integer
                                description: Total number of applications associated with the user
                                example: 15
                              details:
                                type: array
                                description: Breakdown of applications by status
                                items:
                                  type: object
                                  properties:
                                    status:
                                      type: string
                                      description: Application status
                                      example: "To Do"
                                    count:
                                      type: integer
                                      description: Number of applications with the specified status
                                      example: 5
              examples:
                example-response:
                  summary: Example response
                  value:
                    message: "Applications count for each member"
                    Statistic:
                      - total_user: 3
                        detail:
                          - user_name: "John Doe"
                            total_app: 10
                            details:
                              - status: "To Do"
                                count: 4
                              - status: "Implement"
                                count: 3
                              - status: "Testing"
                                count: 2
                              - status: "Production"
                                count: 1
                          - user_name: "Jane Smith"
                            total_app: 5
                            details:
                              - status: "To Do"
                                count: 2
                              - status: "Implement"
                                count: 3
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    description: Detailed error message
                    example: "Unknown error"
              examples:
                server-error:
                  summary: Example error response
                  value:
                    message: "Server error"
                    error: "Database connection failed"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

  /app/add-member-app:
    post:
      summary: Add a member to an application
      description: Adds a user to the specified application's team members. Requires admin role.
      tags:
        - Application (use by Admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - appId
                - userId
              properties:
                appId:
                  type: string
                  description: ID of the application to which the user will be added
                userId:
                  type: string
                  description: ID of the user to be added to the application
            example:
              appId: "603d0b00f41f5b4c1c2c0f1a"
              userId: "603d0b00f41f5b4c1c2c0f1b"
      responses:
        '200':
          description: User added to application successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User added to application successfully"
                  application:
                    $ref: '#/components/schemas/Application'
        '400':
          description: Invalid application ID, user ID, or user is already a member
        '404':
          description: Application or user not found
        '500':
          description: Server error with error message 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Server error"
                  error: 
                    type: string
                    description: Detailed error message from the server
                    example: "Error: Cannot connect to database"
              examples: 
                server_error:
                  summary: Server error example
                  value: 
                    success: false
                    message: "Server error"
                    error: "Database connection failed"
      x-buttons:
        - text: Cancel
          onClick: "window.location.reload()" # Cancel button action
        - text: Reset
          onClick: "resetForm()" # Reset button (front-end should define resetForm())
      x-execute-query: true # Show Execute Query button to test API

  /app/add-activity-app:
    post:
      summary: Add activity/comment to an application
      description: Adds a new activity or comment to a specific application by a logged-in user.
      tags:
        - Application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - comment
                - appId
              properties:
                title:
                  type: string
                  description: Title of the activity
                  example: "Added new feature"
                comment:
                  type: string
                  description: Comment or description for the activity
                  example: "Implemented user login feature"
                appId:
                  type: string
                  description: ID of the application where the activity is being added
                  example: "617c1f77f0d4c800170d0f67"
            examples:
              example-request:
                summary: Example request
                value:
                  title: "Added new feature"
                  comment: "Implemented user login feature"
                  appId: "617c1f77f0d4c800170d0f67"
      responses:
        '200':
          description: Activity added successfully to the application
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Activity is added to the application successfully:"
                  application:
                    type: object
                    description: Details of the application with the new activity
                    properties:
                      _id:
                        type: string
                        description: Application ID
                        example: "617c1f77f0d4c800170d0f67"
                      activities:
                        type: array
                        description: List of activities in the application
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              description: Activity ID
                              example: "617c1f77f0d4c800170d0f68"
                            title:
                              type: string
                              description: Title of the activity
                              example: "Added new feature"
                            comment:
                              type: string
                              description: Comment for the activity
                              example: "Implemented user login feature"
                            user_name:
                              type: string
                              description: Name of the user who added the activity
                              example: "John Doe"
        '400':
          description: Invalid request data or application ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Invalid appId format"
        '404':
          description: User or application not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "User not found"
              examples:
                user-not-found:
                  summary: User not found example
                  value:
                    message: "User not found"
                application-not-found:
                  summary: Application not found example
                  value:
                    message: "Application not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Server error"
                  error:
                    type: string
                    description: Detailed error message
                    example: "Database connection failed"
              examples:
                server-error:
                  summary: Server error example
                  value:
                    message: "Server error"
                    error: "Database connection failed"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"


  /app/duplicate/{id}:
    post:
      summary: Duplicate an application
      description: Creates a duplicate of an existing application with optional copying of related data like tasks and team members.
      tags:
        - Application (use by Admin)
      parameters:
        - name: id
          in: path
          description: ID of the application to be duplicated
          required: true
          schema:
            type: string
            format: uuid
            example: 617c1f77f0d4c800170d0f67
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                includeRelations:
                  type: boolean
                  description: Whether to include related data (tasks and team members) in the duplicated application
                  example: true
            examples:
              copy-with-relations:
                summary: Duplicate with relations
                value:
                  includeRelations: true
              copy-without-relations:
                summary: Duplicate without relations
                value:
                  includeRelations: false
      responses:
        '201':
          description: Application duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Application duplicated successfully"
                  application:
                    type: object
                    description: Details of the duplicated application
                    properties:
                      _id:
                        type: string
                        description: Unique ID of the duplicated application
                        example: "617c1f77f0d4c800170d0f67"
                      title:
                        type: string
                        description: Title of the duplicated application
                        example: "Existing Application - Copy"
                      tasks:
                        type: array
                        description: List of tasks in the duplicated application
                        items:
                          type: object
                      teamMembers:
                        type: array
                        description: List of team members in the duplicated application
                        items:
                          type: object
                      createdAt:
                        type: string
                        description: Creation timestamp of the duplicated application
                        example: "2023-01-01T10:00:00.000Z"
                      updatedAt:
                        type: string
                        description: Last update timestamp of the duplicated application
                        example: "2023-01-02T12:00:00.000Z"
        '400':
          description: Invalid application ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Invalid application ID"
              examples:
                invalid-id:
                  summary: Invalid ID example
                  value:
                    message: "Invalid application ID"
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Application not found"
              examples:
                app-not-found:
                  summary: Application not found example
                  value:
                    message: "Application not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Server error"
                  error:
                    type: string
                    description: Detailed error message
                    example: "Error saving application"
              examples:
                server-error:
                  summary: Server error example
                  value:
                    message: "Server error"
                    error: "Database connection failed"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

  /app/get-all-todo:
    get:
      summary: Get all "To Do" applications
      description: Retrieves all untrashed applications with the status "To Do".
      tags:
        - Application
      responses:
        '200':
          description: Successfully retrieved "To Do" applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    description: List of "To Do" applications
                    items:
                      type: object
              examples:
                todo-applications:
                  summary: Example response
                  value:
                    applications: []
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Unknown error"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

  /app/get-all-implement:
    get:
      summary: Get all "Implement" applications
      description: Retrieves all untrashed applications with the status "Implement".
      tags:
        - Application
      responses:
        '200':
          description: Successfully retrieved "Implement" applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    description: List of "Implement" applications
                    items:
                      type: object
              examples:
                implement-applications:
                  summary: Example response
                  value:
                    applications: []
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Unknown error"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

  /app/get-all-testing:
    get:
      summary: Get all "Testing" applications
      description: Retrieves all untrashed applications with the status "Testing".
      tags:
        - Application
      responses:
        '200':
          description: Successfully retrieved "Testing" applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    description: List of "Testing" applications
                    items:
                      type: object
              examples:
                testing-applications:
                  summary: Example response
                  value:
                    applications: []
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Unknown error"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

  /app/get-all-production:
    get:
      summary: Get all "Production" applications
      description: Retrieves all untrashed applications with the status "Production".
      tags:
        - Application
      responses:
        '200':
          description: Successfully retrieved "Production" applications
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    description: List of "Production" applications
                    items:
                      type: object
              examples:
                production-applications:
                  summary: Example response
                  value:
                    applications: []
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Unknown error"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

  /app/add-task/{applicationId}:
    put:
      summary: Add a new task to an application
      description: Adds a new task to an existing application. The task details are provided in the request body.
      tags:
        - Application 
      security:
        - bearerAuth: []
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            description: The ID of the application where the task will be added
          example: "63b6f0a0c6a5f08d4b5e613c"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - deadline
                - tag
              properties:
                title:
                  type: string
                  description: Title of the task
                  example: "Fix bug #1"
                deadline:
                  type: string
                  format: date-time
                  description: The deadline of the task in ISO 8601 format
                  example: "2024-12-30T00:00:00Z"
                tag:
                  type: string
                  description: Tag or category of the task
                  example: "Bug"
                status:
                  type: string
                  description: Status of the task
                  enum:
                    - To Do
                    - In progress
                    - Done
                  example: "In progress"
      responses:
        '201':
          description: Task added to application successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task added to application successfully"
                  task:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "63b6f0a0c6a5f08d4b5e613e"
                      title:
                        type: string
                        example: "Fix bug #1"
                      deadline:
                        type: string
                        format: date-time
                        example: "2024-12-30T00:00:00Z"
                      tag:
                        type: string
                        example: "Bug"
                      status:
                        type: string
                        example: "In progress"
        '400':
          description: Missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task details (title, deadline, tag) are required."
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application not found."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Detailed server error message"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

  /app/update-task/{applicationId}/{taskId}:
    put:
      summary: Update a task in an application
      description: Updates the details of a specific task within a specified application. Validates both application ID and task ID.
      tags:
        - Application
      security:
        - bearerAuth: []
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            description: The ID of the application where the task exists
            example: "63b6f0a0c6a5f08d4b5e613c"
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            description: The ID of the task to be updated
            example: "63b6f0a0c6a5f08d4b5e613e"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the task
                  example: "Fix bug #101"
                deadline:
                  type: string
                  format: date-time
                  description: Deadline for the task in ISO 8601 format
                  example: "2024-12-30T00:00:00Z"
                tag:
                  type: string
                  description: Tag or category of the task
                  example: "Bug"
                status:
                  type: string
                  description: Status of the task
                  enum:
                    - To Do
                    - In progress
                    - Done
                  example: "In progress"
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task updated successfully."
                  task:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "63b6f0a0c6a5f08d4b5e613e"
                      title:
                        type: string
                        example: "Fix bug #101"
                      deadline:
                        type: string
                        format: date-time
                        example: "2024-12-30T00:00:00Z"
                      tag:
                        type: string
                        example: "Bug"
                      status:
                        type: string
                        example: "In progress"
        '400':
          description: Invalid input or task/application ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application ID and Task ID are required."
        '404':
          description: Application or task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task not found in the application."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Detailed error message from server"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

  /app/delete-task/{applicationId}/{taskId}:
    delete:
      summary: Delete a task from an application
      description: Removes a specified task from a given application. Validates both application ID and task ID and ensures the task exists within the application.
      tags:
        - Application
      security:
        - bearerAuth: []
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            description: The ID of the application where the task exists
            example: "63b6f0a0c6a5f08d4b5e613c"
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            description: The ID of the task to be deleted
            example: "63b6f0a0c6a5f08d4b5e613e"
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task deleted successfully."
                  task:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "63b6f0a0c6a5f08d4b5e613e"
                      title:
                        type: string
                        example: "Fix bug #101"
                      deadline:
                        type: string
                        format: date-time
                        example: "2024-12-30T00:00:00Z"
                      tag:
                        type: string
                        example: "Bug"
                      status:
                        type: string
                        example: "In progress"
        '400':
          description: Invalid input or task/application ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application ID and Task ID are required."
        '404':
          description: Application or task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task not found in the application."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: string
                    example: "Detailed error message from server"
      x-execute:
        - description: "Execute query to test the API"
          button: "Execute Query"
      x-reset:
        - description: "Reset the input parameters and clear the response"
          button: "Reset"
      x-cancel:
        - description: "Cancel the request and go back"
          button: "Cancel"

components:
  schemas:
    Application:
      type: object
      properties:
        _id:
          type: string
          description: Auto-generated application ID
        title:
          type: string
          description: Application title
          example: Task Management System
        description:
          type: string
          description: Application description
          example: Tracks tasks and team activities
        assets:
          type: array
          items:
            type: string
          description: Assets related to the application, URL of document files
        status:
          type: string
          enum: ["To Do", "Implement", "Testing", "Production"]
          description: Current status of the application
          example: To Do
        isTrashed:
          type: boolean
          description: Is the application in trash?
          example: false
        priority:
          type: string
          description: Application priority
          example: High
        tasks:
          type: array
          items:
            type: string
          description: List of task IDs associated with the application
        activities:
          type: array
          items:
            type: string
          description: List of activity IDs associated with the application
        teamMembers:
          type: array
          items:
            type: string
          description: List of team member IDs associated with the application
